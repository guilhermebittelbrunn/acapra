import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';
import { AnimalModel } from '@prisma/client';
import AnimalStatus from './animalStatus.domain';
import AnimalGender from './animalGender.domain';
import { AnimalStatusEnum } from '@/shared/types/animal';
import Specie from '../specie.domain';
import Breed from '../breed.domain';
import { Association } from '@/module/association/domain/association.domain';
import Publication from '@/module/association/domain/publication.domain';

interface IAnimalProps extends PartialAutoGenerated<Pick<AnimalModel, 'name' | 'age' | 'weight'>> {
  description?: string | null;
  associationId: UniqueEntityID;
  specieId: UniqueEntityID;
  breedId: UniqueEntityID;
  publicationId?: UniqueEntityID;
  status?: AnimalStatus;
  gender: AnimalGender;

  specie?: Specie;
  breed?: Breed;
  association?: Association;
  publication?: Publication | null | undefined;
}

export default class Animal extends Entity<IAnimalProps> {
  constructor(props: IAnimalProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get name(): string {
    return this.props.name;
  }

  get description(): string | null | undefined {
    return this.props.description;
  }

  get age(): number {
    return this.props.age;
  }

  get weight(): number {
    return this.props.weight;
  }

  get associationId(): UniqueEntityID {
    return this.props.associationId;
  }

  get specieId(): UniqueEntityID {
    return this.props.specieId;
  }

  get breedId(): UniqueEntityID {
    return this.props.breedId;
  }

  get publicationId(): UniqueEntityID | undefined | null {
    return this.props.publicationId;
  }

  get status(): AnimalStatus {
    return this.props.status;
  }

  get gender(): AnimalGender {
    return this.props.gender;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  get specie(): Specie | null | undefined {
    return this.props.specie;
  }

  get breed(): Breed | null | undefined {
    return this.props.breed;
  }

  get association(): Association | null | undefined {
    return this.props.association;
  }

  get publication(): Publication | null | undefined {
    return this.props.publication;
  }

  public static create(props: IAnimalProps, id?: UniqueEntityID): Animal | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.associationId, argumentName: 'id da associação' },
      { argument: props.specieId, argumentName: 'id da espécie' },
      { argument: props.breedId, argumentName: 'id da raça' },
    ]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefault = {
      status: AnimalStatus.create(AnimalStatusEnum.AVAILABLE) as AnimalStatus,
      ...props,
    };

    return new Animal(propsWithDefault, id);
  }
}
