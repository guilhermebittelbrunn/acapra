import { AnimalModel } from '@prisma/client';

import AnimalBreed from './animalBreed.domain';
import AnimalGender from './animalGender.domain';
import AnimalSize from './animalSize.domain';
import AnimalStatus from './animalStatus.domain';

import Specie from '../specie.domain';

import { Association } from '@/module/association/domain/association.domain';
import Publication from '@/module/association/domain/publication.domain';
import Tag from '@/module/association/domain/tag/tag.domain';
import TagAnimal from '@/module/association/domain/tag/tagAnimal.domain';
import WishList from '@/module/user/domain/wishList.domain';
import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { filledArray } from '@/shared/core/utils/undefinedHelpers';
import { AnimalStatusEnum } from '@/shared/types/animal';
import { PartialAutoGenerated } from '@/shared/types/common';

interface IAnimalProps extends PartialAutoGenerated<Pick<AnimalModel, 'name' | 'age'>> {
  description?: string | null;
  associationId: UniqueEntityID;
  specieId: UniqueEntityID;
  breed: AnimalBreed;
  publicationId?: UniqueEntityID;
  status?: AnimalStatus;
  gender: AnimalGender;
  size: AnimalSize;
  weight?: number | null | undefined;

  specie?: Specie;
  association?: Association;
  publication?: Publication | null | undefined;
  wishLists?: WishList[];
  tagAnimals?: TagAnimal[];
  tags?: Tag[];
}

export default class Animal extends Entity<IAnimalProps> {
  constructor(props: IAnimalProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get name(): string {
    return this.props.name;
  }

  get description(): string | null | undefined {
    return this.props.description;
  }

  get age(): number {
    return this.props.age;
  }

  get weight(): number | null | undefined {
    return this.props.weight;
  }

  get associationId(): UniqueEntityID {
    return this.props.associationId;
  }

  get specieId(): UniqueEntityID {
    return this.props.specieId;
  }

  get breed(): AnimalBreed {
    return this.props.breed;
  }

  get publicationId(): UniqueEntityID | undefined | null {
    return this.props.publicationId;
  }

  get status(): AnimalStatus {
    return this.props.status;
  }

  set status(status: AnimalStatus) {
    this.props.status = status;
  }

  get gender(): AnimalGender {
    return this.props.gender;
  }

  get size(): AnimalSize {
    return this.props.size;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  get specie(): Specie | null | undefined {
    return this.props.specie;
  }

  get association(): Association | null | undefined {
    return this.props.association;
  }

  get publication(): Publication | null | undefined {
    return this.props.publication;
  }

  get wishLists(): WishList[] {
    return this.props.wishLists;
  }

  get tagAnimals(): TagAnimal[] {
    return this.props.tagAnimals;
  }

  get tags(): Tag[] {
    return this.tagAnimals.flatMap((tagAnimal) => tagAnimal.tag);
  }

  get isFavorite(): boolean {
    return filledArray(this.wishLists);
  }

  get isAvailable(): boolean {
    return [AnimalStatusEnum.AVAILABLE].includes(this.status.value);
  }

  public static create(props: IAnimalProps, id?: UniqueEntityID): Animal | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.associationId, argumentName: 'id da associação' },
      { argument: props.specieId, argumentName: 'id da espécie' },
    ]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefault = {
      status: AnimalStatus.create(AnimalStatusEnum.AVAILABLE) as AnimalStatus,
      ...props,
    };

    return new Animal(propsWithDefault, id);
  }
}
