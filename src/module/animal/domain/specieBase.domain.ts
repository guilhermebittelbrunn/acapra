import { SpecieBaseModel } from '@prisma/client';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { SpecieBaseTypeEnum } from '@/shared/types/animal';
import { PartialAutoGenerated } from '@/shared/types/common';

interface ISpecieBaseProps extends PartialAutoGenerated<Omit<SpecieBaseModel, 'type'>> {
  type: SpecieBaseTypeEnum;
}

export default class SpecieBase extends Entity<ISpecieBaseProps> {
  constructor(props: ISpecieBaseProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get name(): string {
    return this.props.name;
  }

  get type(): SpecieBaseTypeEnum {
    return this.props.type;
  }

  get enabled(): boolean {
    return this.props.enabled;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  public static create(props: ISpecieBaseProps, id?: UniqueEntityID): SpecieBase | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([{ argument: props.type, argumentName: 'tipo' }]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefault = {
      enabled: true,
      ...props,
    };

    return new SpecieBase(propsWithDefault, id);
  }
}
