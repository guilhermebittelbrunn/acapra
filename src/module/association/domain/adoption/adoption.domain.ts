import { AdoptionModel } from '@prisma/client';

import AdoptionStatus from './adoptionStatus.domain';

import Animal from '@/module/animal/domain/animal/animal.domain';
import User from '@/module/user/domain/user/user.domain';
import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { AdoptionStatusEnum } from '@/shared/types/association';
import { PartialAutoGenerated } from '@/shared/types/common';

interface IAdoptionProps extends PartialAutoGenerated<Pick<AdoptionModel, 'id'>> {
  associationId: UniqueEntityID;
  requestedBy: UniqueEntityID;
  respondedBy?: UniqueEntityID | null;
  animalId: UniqueEntityID;
  observation?: string;
  status?: AdoptionStatus;

  requestedByUser?: User;
  animal?: Animal;
}

export default class Adoption extends Entity<IAdoptionProps> {
  constructor(props: IAdoptionProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get associationId(): UniqueEntityID {
    return this.props.associationId;
  }

  get requestedBy(): UniqueEntityID {
    return this.props.requestedBy;
  }

  get respondedBy(): UniqueEntityID | null | undefined {
    return this.props.respondedBy;
  }

  set respondedBy(respondedBy: UniqueEntityID | null | undefined) {
    this.props.respondedBy = respondedBy;
  }

  get animalId(): UniqueEntityID {
    return this.props.animalId;
  }

  get observation(): string | undefined | null {
    return this.props.observation;
  }

  get status(): AdoptionStatus {
    return this.props.status;
  }

  set status(status: AdoptionStatus) {
    this.props.status = status;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  get requestedByUser(): User | undefined {
    return this.props.requestedByUser;
  }

  get animal(): Animal | undefined {
    return this.props.animal;
  }

  public static create(props: IAdoptionProps, id?: UniqueEntityID): Adoption | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.associationId, argumentName: 'id da associação' },
      { argument: props.requestedBy, argumentName: 'id do usuário da requisição' },
      { argument: props.animalId, argumentName: 'id do animal' },
    ]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefaults = {
      status: AdoptionStatus.create(AdoptionStatusEnum.PENDING) as AdoptionStatus,
      ...props,
    };

    return new Adoption(propsWithDefaults, id);
  }
}
