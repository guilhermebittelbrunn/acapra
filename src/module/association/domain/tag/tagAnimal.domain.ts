import { TagAnimalModel } from '@prisma/client';

import Tag from './tag.domain';

import Animal from '@/module/animal/domain/animal/animal.domain';
import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

interface ITagAnimalProps extends PartialAutoGenerated<Omit<TagAnimalModel, 'tagId' | 'animalId'>> {
  animalId?: UniqueEntityID;
  tagId?: UniqueEntityID;

  tag?: Tag;
  animal?: Animal;
}

export default class TagAnimal extends Entity<ITagAnimalProps> {
  constructor(props: ITagAnimalProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get animalId(): UniqueEntityID | null | undefined {
    return this.props.animalId;
  }

  get tagId(): UniqueEntityID | null | undefined {
    return this.props.tagId;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  get animal(): Animal | null | undefined {
    return this.props.animal;
  }

  get tag(): Tag | null | undefined {
    return this.props.tag;
  }

  public static create(props: ITagAnimalProps, id?: UniqueEntityID): TagAnimal | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.animalId, argumentName: 'id do animal' },
      { argument: props.tagId, argumentName: 'id da tag' },
    ]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new TagAnimal(props, id);
  }
}
