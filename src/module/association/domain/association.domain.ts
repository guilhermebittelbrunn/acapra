import { AssociationModel } from '@prisma/client';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IAssociationProps extends PartialAutoGenerated<Omit<AssociationModel, 'addressId'>> {
  addressId?: UniqueEntityID | null | undefined;
}

export class Association extends Entity<IAssociationProps> {
  constructor(props: IAssociationProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get addressId(): UniqueEntityID | null | undefined {
    return this.props.addressId;
  }

  set addressId(value: UniqueEntityID) {
    this.props.addressId = value;
  }

  get name(): string {
    return this.props.name;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  public static create(props: IAssociationProps, id?: UniqueEntityID): Association | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([{ argument: props.name, argumentName: 'nome' }]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new Association(props, id);
  }
}
