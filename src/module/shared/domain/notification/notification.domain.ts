import { NotificationModel } from '@prisma/client';

import NotificationType from './notificationType.domain';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericAppError from '@/shared/core/logic/GenericAppError';
import GenericErrors from '@/shared/core/logic/GenericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';
import { NotificationTypeEnum } from '@/shared/types/shared';

interface INotificationProps extends PartialAutoGenerated<Pick<NotificationModel, 'title'>> {
  associationId?: UniqueEntityID;
  userId?: UniqueEntityID;
  description?: string;

  isRead?: boolean;
  type?: NotificationType;
}

export default class Notification extends Entity<INotificationProps> {
  constructor(props: INotificationProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get title(): string {
    return this.props.title;
  }

  get description(): string | null | undefined {
    return this.props.description;
  }

  get associationId(): UniqueEntityID | null | undefined {
    return this.props.associationId;
  }

  get userId(): UniqueEntityID | null | undefined {
    return this.props.associationId;
  }

  get isRead(): boolean {
    return this.props.isRead;
  }

  get type(): NotificationType {
    return this.props.type;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  public static create(props: INotificationProps, id?: UniqueEntityID): Notification | GenericAppError {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.associationId && props.userId, argumentName: 'id da associação ou usuário' },
    ]);

    if (!guardedProps.succeeded) {
      return new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefault = {
      isRead: true,
      type: NotificationType.create(NotificationTypeEnum.INFO) as NotificationType,
      ...props,
    };

    return new Notification(propsWithDefault, id);
  }
}
