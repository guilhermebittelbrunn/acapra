import { HttpException, HttpStatus } from '@nestjs/common';
import { AddressModel } from '@prisma/client';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IAddressProps extends PartialAutoGenerated<Partial<AddressModel>> {}

export default class Address extends Entity<IAddressProps> {
  constructor(props: IAddressProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get country(): string {
    return this.props.country;
  }

  get state(): string {
    return this.props.state;
  }

  get city(): string {
    return this.props.city;
  }

  get street(): string {
    return this.props.street;
  }

  get addressNumber(): string {
    return this.props.addressNumber;
  }

  get cep(): string {
    return this.props.cep;
  }

  get complement(): string {
    return this.props.complement;
  }

  get neighborhood(): string {
    return this.props.neighborhood;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deleted(): boolean {
    return this.props.deleted;
  }

  public static create(props: IAddressProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([{ argument: props.cep, argumentName: 'cep' }]);

    if (!guardedProps.succeeded) {
      throw new HttpException(guardedProps.message, HttpStatus.BAD_REQUEST);
    }

    const propsWithDefault = {
      country: 'BR',
      ...props,
    };
    return new Address(propsWithDefault, id);
  }
}
